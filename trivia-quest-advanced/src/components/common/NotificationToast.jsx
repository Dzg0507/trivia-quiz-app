import React, { useContext, useEffect, useState, useCallback } from 'react';import { NotificationContext } from '../../context/NotificationContext';const getTypeClasses = (toastType) => {  switch (toastType) {    case 'success':      return 'bg-green-500 text-white';    case 'error':      return 'bg-red-500 text-white';    case 'warning':      return 'bg-yellow-500 text-black';    case 'info':    default:      return 'bg-blue-500 text-white';  }};const ToastItem = ({ id, message, type, onDismiss, duration }) => {  const [isVisible, setIsVisible] = useState(true);  useEffect(() => {    if (duration > 0 && isVisible) {      const timer = setTimeout(() => {        setIsVisible(false);        setTimeout(() => onDismiss(id), 300); // Allow time for fade-out animation      }, duration);      return () => clearTimeout(timer);    }  }, [id, isVisible, onDismiss, duration]);  const handleDismissClick = useCallback(() => {    setIsVisible(false);    setTimeout(() => onDismiss(id), 300); // Allow time for fade-out animation  }, [id, onDismiss]);  const baseClasses = "flex items-center justify-between p-4 mb-2 rounded shadow-lg transition-opacity duration-300 ease-in-out";  const opacityClass = isVisible ? 'opacity-100' : 'opacity-0';  return (    <div className={`${baseClasses} ${getTypeClasses(type)} ${opacityClass}`}      role="alert"      aria-live="assertive"      aria-atomic="true"    >      <p className="mr-4">{message}</p>      <button        onClick={handleDismissClick}        className="text-white hover:text-gray-200 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50"        aria-label="Dismiss notification"      >        &times;      </button>    </div>  );};const NotificationToastContainer = () => {  const { notifications, dismissNotification } = useContext(NotificationContext);  if (!notifications || notifications.length === 0) {    return null;  }  const containerClasses = "fixed top-4 right-4 z-50 max-w-sm w-full";  return (    <div className={containerClasses} aria-live="polite" aria-atomic="true">      {notifications.map((notification) => (        <ToastItem          key={notification.id}          id={notification.id}          message={notification.message}          type={notification.type}          onDismiss={dismissNotification}          duration={notification.duration}        />      ))}    </div>  );};export default NotificationToastContainer;